{"version":3,"sources":["components/SLDropDown.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SLDropDown","options","text","placeholder","itemsVisible","containerRef","useRef","defaultPlaceholder","defaultOptions","useState","dropAreaVisible","setDropAreaVisible","inputValue","setInputValue","filteredOptions","query","filter","o","toLowerCase","includes","globalEventListener","event","target","current","contains","useEffect","document","addEventListener","removeEventListener","itemOnMouseOver","style","backgroundColor","cursor","itemOnMouseOut","itemClick","value","textContent","dynamicHeight","Math","min","length","className","ref","visibility","onClick","type","onChange","display","height","map","item","i","key","onMouseOver","onMouseOut","App","drinks","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAoEeA,G,MA1D+B,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,YAAmC,IAAtBC,oBAAsB,MAAP,EAAO,EAC1FC,EAAeC,iBAAO,MACtBC,EAA6BJ,GAAe,iBAC5CK,EAAiCP,GAAW,GAH8C,EAKlDQ,oBAAS,GALyC,mBAKzFC,EALyF,KAKxEC,EALwE,OAM5DF,mBAASP,GAAQ,IAN2C,mBAMzFU,EANyF,KAM7EC,EAN6E,KAO1FC,EAAkB,SAACC,GAAD,OAAoBP,EAAeQ,QAAO,SAAAC,GAAC,OAAIA,EAAEC,cAAcC,SAASJ,EAAMG,mBAEhGE,EAA4B,SAACC,GACjC,IAAMC,EAAsBD,EAAMC,OACHjB,EAAakB,QAC7BC,SAASF,IACtBX,GAAmB,IAIvBc,qBAAU,WAER,OADAC,SAASC,iBAAiB,QAASP,GAC5B,WACLM,SAASE,oBAAoB,QAASR,MAEvC,IAEH,IAKMS,EAAkB,SAACR,GACvB,IAAMC,EAAwBD,EAAMC,OACpCA,EAAOQ,MAAMC,gBAAkB,aAC/BT,EAAOQ,MAAME,OAAS,WAElBC,EAAiB,SAACZ,GACQA,EAAMC,OAC7BQ,MAAMC,gBAAkB,SAE3BG,EAAY,SAACb,GACjB,IACMc,EADwBd,EAAMC,OACPc,YAC7BvB,EAAcsB,GACdxB,GAAmB,IAGf0B,EAA6E,GAA7DC,KAAKC,IAAInC,EAAcU,EAAgBF,GAAY4B,QAEzE,OACE,yBAAKC,UAAU,oBAAoBC,IAAKrC,GACtC,4BAAQoC,UAAU,gBAAgBX,MAAO,CAACa,WAAa/B,EAAa,UAAY,UAAYgC,QAAS,kBAAM/B,EAAc,OACzH,2BAAOV,YAAaI,EAAoBkC,UAAU,WAAWI,KAAK,OAAOC,SA1BvD,SAACzB,GACrB,IACMc,EAD2Bd,EAAMC,OACVa,MAC7BtB,EAAcsB,IAuBsFS,QANnF,SAACvB,GAAD,OAA6BV,EAAmBH,EAAegC,OAAS,IAMgCL,MAAOvB,IAC9H,wBAAI6B,UAAU,kBAAkBX,MAAO,CAACiB,QAAUrC,EAAkB,QAAU,OAASsC,OAAQX,IAC5FvB,EAAgBF,GAAYqC,KAAI,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,EAAGV,UAAU,iBAAiBY,YAAaxB,EAAiByB,WAAYrB,EAAgBW,QAASV,GAAYgB,UC3C7JK,EAhBO,WACpB,IAAMC,EAAyB,CAAC,OAAQ,YAAa,QAAS,OAAQ,QAEhErB,EAAQqB,EAAO,GAErB,OACE,yBAAKf,UAAU,OACb,iCAEA,iCACE,kBAAC,EAAD,CAAYxC,QAASuD,EAAQrD,YARf,eAQyCD,KAAMiC,EAAO/B,aAAc,OCDtEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASsC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.223da4ff.chunk.js","sourcesContent":["import React, {MouseEvent, useEffect, useState, useRef, ChangeEvent} from 'react';\nimport './SLDropDown.css';\n\ntype SLDropDownProps = {\n  options?: Array<string>,\n  text?: string,\n  placeholder?: string,\n  itemsVisible?: number\n}\n\nconst SLDropDown: React.FC<SLDropDownProps> = ({options, text, placeholder, itemsVisible = 5}) => {\n  const containerRef = useRef(null);\n  const defaultPlaceholder: string = placeholder || 'Pick something';\n  const defaultOptions : Array<string> = options || [];\n\n  const [dropAreaVisible, setDropAreaVisible] = useState(false);\n  const [inputValue, setInputValue] = useState(text || '');\n  const filteredOptions = (query: string) => (defaultOptions.filter(o => o.toLowerCase().includes(query.toLowerCase())));\n  \n  const globalEventListener : any = (event: MouseEvent) => {\n    const target: HTMLElement = event.target as HTMLElement;\n    const container: HTMLElement = containerRef.current!;\n    if (!container.contains(target)) {\n      setDropAreaVisible(false);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"click\", globalEventListener);\n    return () => {\n      document.removeEventListener(\"click\", globalEventListener);\n    };\n  }, []);\n\n  const inputOnChange = (event: ChangeEvent): void => {\n    const target: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = target.value;\n    setInputValue(value);\n  }\n  const itemOnMouseOver = (event: MouseEvent): void  => {\n    const target: HTMLLIElement = event.target as HTMLLIElement;\n    target.style.backgroundColor = 'whitesmoke';\n    target.style.cursor = 'pointer';\n  }\n  const itemOnMouseOut = (event: MouseEvent): void  => {\n    const target: HTMLLIElement = event.target as HTMLLIElement;\n    target.style.backgroundColor = 'white';\n  }\n  const itemClick = (event: MouseEvent): void => {\n    const target: HTMLLIElement = event.target as HTMLLIElement;\n    const value: string = target.textContent!;\n    setInputValue(value);\n    setDropAreaVisible(false);\n  }\n  const inputClick = (event: MouseEvent): void => setDropAreaVisible(defaultOptions.length > 0);\n  const dynamicHeight = Math.min(itemsVisible, filteredOptions(inputValue).length) * 34;\n  \n  return (\n    <div className=\"dd-container-area\" ref={containerRef}>\n      <button className=\"dd-close-icon\" style={{visibility: (inputValue ? 'visible' : 'hidden')}} onClick={() => setInputValue('')}></button>\n      <input placeholder={defaultPlaceholder} className=\"dd-input\" type=\"text\" onChange={inputOnChange} onClick={inputClick} value={inputValue}></input>\n      <ul className=\"dd-options-area\" style={{display: (dropAreaVisible ? 'block' : 'none'), height: dynamicHeight}}>\n        {filteredOptions(inputValue).map((item, i) => <li key={i} className=\"dd-option-item\" onMouseOver={itemOnMouseOver} onMouseOut={itemOnMouseOut} onClick={itemClick}>{item}</li>)}\n      </ul>\n    </div>\n  );\n}\n\nexport default SLDropDown;\n","import React from 'react';\nimport SLDropDown from './components/SLDropDown';\n\nconst App: React.FC = () => {\n  const drinks : Array<string> = ['Beer', 'Beherovka', 'Vodka', 'Vino', 'Wine'];\n  const placeholder = 'Pick a drink';\n  const value = drinks[0];\n\n  return (\n    <div className=\"App\">\n      <header>\n      </header>\n      <section>\n        <SLDropDown options={drinks} placeholder={placeholder} text={value} itemsVisible={3}/>        \n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}